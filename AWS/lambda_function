import json
import boto3
import datetime

# Initialize DynamoDB
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("RSVPResponses")  # Ensure this table exists in DynamoDB

def lambda_handler(event, context):
    try:
        # Parse request body
        body = json.loads(event["body"])

        # Input validation
        if "name" not in body or "attending" not in body:
            return {
                "statusCode": 400,
                "headers": {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "POST, OPTIONS",
                    "Access-Control-Allow-Headers": "Content-Type"
                },
                "body": json.dumps({"message": "Name and attendance status are required!"})
            }

        # Prepare RSVP data
        item = {
            "id": str(int(datetime.datetime.now().timestamp() * 1000)),  # Unique timestamp ID
            "name": body["name"],
            "attending": body["attending"],
            "guests": int(body["guests"]) if "guests" in body and body["attending"] == "yes" else 0
        }

        # Store in DynamoDB
        table.put_item(Item=item)

        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type"
            },
            "body": json.dumps({"message": "RSVP recorded successfully!"})
        }

    except Exception as e:
        print(f"Error saving RSVP: {str(e)}")

        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type"
            },
            "body": json.dumps({"message": "Error processing RSVP"})
        }
