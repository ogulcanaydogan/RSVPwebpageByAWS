# # 1️⃣ S3 BUCKET FOR RSVP WEBSITE (WITH PUBLIC ACCESS)
# resource "aws_s3_bucket" "rsvp_website" {
#   bucket = "rsvp-ogulcanaydogan-com"
# }

# resource "aws_s3_bucket_website_configuration" "rsvp_website_config" {
#   bucket = aws_s3_bucket.rsvp_website.id

#   index_document {
#     suffix = "index.html"
#   }
# }

# # Public Access Block (Disabled to allow policy changes)
# resource "aws_s3_bucket_public_access_block" "rsvp_public_access" {
#   bucket                  = aws_s3_bucket.rsvp_website.id
#   block_public_acls       = false
#   block_public_policy     = false
#   ignore_public_acls      = false
#   restrict_public_buckets = false
# }

# # S3 BUCKET POLICY - Allow public access
# resource "aws_s3_bucket_policy" "rsvp_policy" {
#   bucket = aws_s3_bucket.rsvp_website.id
#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect    = "Allow",
#         Principal = "*",
#         Action    = "s3:GetObject",
#         Resource  = "arn:aws:s3:::rsvp-ogulcanaydogan-com/*"
#       }
#     ]
#   })
# }



provider "aws" {
  region = "us-east-1"
}

# 1️⃣ S3 BUCKET FOR RSVP WEBSITE
resource "aws_s3_bucket" "rsvp_website" {
  bucket = "rsvp-ogulcanaydogan-com"
}

resource "aws_s3_bucket_website_configuration" "rsvp_website_config" {
  bucket = aws_s3_bucket.rsvp_website.id

  index_document {
    suffix = "index.html"
  }
}

resource "aws_s3_bucket_policy" "rsvp_policy" {
  bucket = aws_s3_bucket.rsvp_website.id
  policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::rsvp-ogulcanaydogan-com/*"
    }
  ]
}
POLICY
}

# 2️⃣ DYNAMODB TABLE
resource "aws_dynamodb_table" "rsvp_table" {
  name         = "RSVPResponses"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "id"

  attribute {
    name = "id"
    type = "S"
  }
}

# 3️⃣ IAM ROLE FOR LAMBDA
resource "aws_iam_role" "lambda_role" {
  name = "rsvp_lambda_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "lambda_dynamodb_policy" {
  name        = "lambda_dynamodb_policy"
  description = "Allows Lambda to write to DynamoDB"
  policy      = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "dynamodb:PutItem",
          "dynamodb:Scan"
        ],
        Effect   = "Allow",
        Resource = aws_dynamodb_table.rsvp_table.arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_dynamodb_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_dynamodb_policy.arn
}

# 4️⃣ LAMBDA FUNCTION (RSVP HANDLER)
resource "aws_lambda_function" "rsvp_lambda" {
  function_name = "rsvpHandler"
  role          = aws_iam_role.lambda_role.arn
  runtime       = "python3.9"
  handler       = "lambda_function.lambda_handler"

  filename = "lambda.zip"  # You need to create and upload this file manually

  environment {
    variables = {
      DYNAMODB_TABLE = aws_dynamodb_table.rsvp_table.name
    }
  }
}

# 5️⃣ API GATEWAY
resource "aws_api_gateway_rest_api" "rsvp_api" {
  name        = "RSVP API"
  description = "API for wedding RSVP"
}

resource "aws_api_gateway_resource" "rsvp_resource" {
  rest_api_id = aws_api_gateway_rest_api.rsvp_api.id
  parent_id   = aws_api_gateway_rest_api.rsvp_api.root_resource_id
  path_part   = "rsvp"
}

resource "aws_api_gateway_method" "rsvp_post" {
  rest_api_id   = aws_api_gateway_rest_api.rsvp_api.id
  resource_id   = aws_api_gateway_resource.rsvp_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "rsvp_lambda_integration" {
  rest_api_id             = aws_api_gateway_rest_api.rsvp_api.id
  resource_id             = aws_api_gateway_resource.rsvp_resource.id
  http_method             = aws_api_gateway_method.rsvp_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.rsvp_lambda.invoke_arn
}

resource "aws_api_gateway_method_response" "rsvp_response" {
  rest_api_id = aws_api_gateway_rest_api.rsvp_api.id
  resource_id = aws_api_gateway_resource.rsvp_resource.id
  http_method = aws_api_gateway_method.rsvp_post.http_method
  status_code = "200"
}

resource "aws_api_gateway_deployment" "rsvp_deployment" {
  depends_on = [aws_api_gateway_integration.rsvp_lambda_integration]
  rest_api_id = aws_api_gateway_rest_api.rsvp_api.id
  stage_name  = "prod"
}

# 6️⃣ PERMISSION FOR API GATEWAY TO CALL LAMBDA
resource "aws_lambda_permission" "apigateway_lambda" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.rsvp_lambda.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_api_gateway_rest_api.rsvp_api.execution_arn}/*/*"
}
